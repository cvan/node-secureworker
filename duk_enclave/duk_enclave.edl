enclave {
	from "sgx_tkey_exchange.edl" import *;
	include "sgx_key_exchange.h"
	include "sgx_report.h"
	include "sgx_tseal.h"

	trusted {
		/* define ECALLs here. */
		public void duk_enclave_init([in, string] const char *key);
		public void duk_enclave_close();
		public void duk_enclave_emit_message([in, string] const char *message);
		public void duk_enclave_init_ra([out] sgx_ra_context_t *ra_context, int pse);
		public void duk_enclave_bootstrap_ra(
			sgx_ra_context_t ra_context,
			[out, size=out_size] sgx_sealed_data_t *out, size_t out_size,
			[in, size=iv_size] const uint8_t *iv, size_t iv_size,
			[in, size=additional_data_size] const uint8_t *additional_data, size_t additional_data_size,
			[in, size=data_size] const uint8_t *data, size_t data_size,
			[in] sgx_aes_gcm_128bit_key_t *tag
		);
		public void duk_enclave_bootstrap_mock(
			[out, size=out_size] sgx_sealed_data_t *out, size_t out_size,
			[in, size=additional_data_size] const uint8_t *additional_data, size_t additional_data_size,
			[in, size=data_size] const uint8_t *clear, size_t data_size
		);
	};

	untrusted {
		/* define OCALLs here. */
		void duk_enclave_post_message([in, string] const char *message);
		void duk_enclave_debug([in, string] const char *message);
	};
};
